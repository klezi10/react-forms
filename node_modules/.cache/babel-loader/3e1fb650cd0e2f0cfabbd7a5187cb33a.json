{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Klizzy\\\\Desktop\\\\react-FORMS\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\"; //can use useState to validate on each keystroke\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const [name, setName] = useState(\"\");\n  const [nameIsValid, setNameIsValid] = useState(false); //not right starting with nameIsValid set to true as it's not true, \n  //so adding a new state confirming if a user wrote in the input already or not\n\n  const [nameIsTouched, setNameIsTouched] = useState(false);\n\n  function handleChange(event) {\n    setName(event.target.value);\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    setNameIsTouched(true);\n\n    if (name.trim() === \"\") {\n      setNameIsValid(false);\n      return;\n    }\n\n    setNameIsValid(true);\n    console.log(name);\n    setName(\"\");\n  } //create a new variable containing 2 variables\n\n\n  const nameIsInvalid = !nameIsValid && nameIsTouched;\n  const nameInputClass = nameIsInvalid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClass,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: handleChange,\n        value: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), nameIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"BQwoozMHThFqm1CpuGZQVqloqI0=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","SimpleInput","props","name","setName","nameIsValid","setNameIsValid","nameIsTouched","setNameIsTouched","handleChange","event","target","value","handleSubmit","preventDefault","trim","console","log","nameIsInvalid","nameInputClass"],"sources":["C:/Users/Klizzy/Desktop/react-FORMS/src/components/SimpleInput.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\n//can use useState to validate on each keystroke\r\n\r\nconst SimpleInput = (props) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [nameIsValid, setNameIsValid] = useState(false);\r\n  //not right starting with nameIsValid set to true as it's not true, \r\n  //so adding a new state confirming if a user wrote in the input already or not\r\n  const [nameIsTouched, setNameIsTouched] = useState(false)\r\n\r\n  function handleChange(event) {\r\n    setName(event.target.value);\r\n  }\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    setNameIsTouched(true)\r\n    \r\n    if (name.trim() === \"\") {\r\n      setNameIsValid(false);\r\n      return;\r\n    }\r\n    setNameIsValid(true);\r\n    console.log(name);\r\n    setName(\"\");\r\n  }\r\n\r\n  //create a new variable containing 2 variables\r\n  const nameIsInvalid = !nameIsValid && nameIsTouched\r\n\r\n  const nameInputClass = nameIsInvalid ? \"form-control invalid\" : \"form-control\"\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className={nameInputClass}>\r\n        <label htmlFor=\"name\">Your Name</label>\r\n        <input type=\"text\" id=\"name\" onChange={handleChange} value={name} />\r\n        {nameIsInvalid && <p className=\"error-text\">Name must not be empty.</p>}\r\n      </div>\r\n      <div className=\"form-actions\">\r\n        <button type=\"submit\">Submit</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SimpleInput;\r\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB,C,CAEA;;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAAA;;EAC7B,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,KAAD,CAA9C,CAF6B,CAG7B;EACA;;EACA,MAAM,CAACO,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,KAAD,CAAlD;;EAEA,SAASS,YAAT,CAAsBC,KAAtB,EAA6B;IAC3BN,OAAO,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP;EACD;;EAED,SAASC,YAAT,CAAsBH,KAAtB,EAA6B;IAC3BA,KAAK,CAACI,cAAN;IACAN,gBAAgB,CAAC,IAAD,CAAhB;;IAEA,IAAIL,IAAI,CAACY,IAAL,OAAgB,EAApB,EAAwB;MACtBT,cAAc,CAAC,KAAD,CAAd;MACA;IACD;;IACDA,cAAc,CAAC,IAAD,CAAd;IACAU,OAAO,CAACC,GAAR,CAAYd,IAAZ;IACAC,OAAO,CAAC,EAAD,CAAP;EACD,CAtB4B,CAwB7B;;;EACA,MAAMc,aAAa,GAAG,CAACb,WAAD,IAAgBE,aAAtC;EAEA,MAAMY,cAAc,GAAGD,aAAa,GAAG,sBAAH,GAA4B,cAAhE;EAEA,oBACE;IAAM,QAAQ,EAAEL,YAAhB;IAAA,wBACE;MAAK,SAAS,EAAEM,cAAhB;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAO,IAAI,EAAC,MAAZ;QAAmB,EAAE,EAAC,MAAtB;QAA6B,QAAQ,EAAEV,YAAvC;QAAqD,KAAK,EAAEN;MAA5D;QAAA;QAAA;QAAA;MAAA,QAFF,EAGGe,aAAa,iBAAI;QAAG,SAAS,EAAC,YAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAHpB;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAME;MAAK,SAAS,EAAC,cAAf;MAAA,uBACE;QAAQ,IAAI,EAAC,QAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QANF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAYD,CAzCD;;GAAMjB,W;;KAAAA,W;AA2CN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}